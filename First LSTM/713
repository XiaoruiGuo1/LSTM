import sys
import os
import math
import numpy as np
import tensorflow as tf
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split

u = np.zeros(180)
x = np.zeros(180)
k = np.arange(0,180)
x[0] = 0
i = 0
for i in range (0,179):
       u[i] = np.sin(i*np.pi/20) 
       x[i + 1] = 0.9*x[i] + 2*u[i]
       i = i + 1
print(x)

print(u)
def u_plot (x_axis,y_axis,x_label,y_label):
    plt.figure(figsize = (11, 6))
    plt.plot(x_axis, y_axis, color ='black')
    plt.xlabel(x_label, {'fontsize': 12}) 
    plt.ylabel(y_label, {'fontsize': 12})
u_plot (k,u,'k','u')
u_plot (k,x,'k','x')
plt.show()

y = x.reshape(36,5)
u = u.reshape(36,5)

u_train, u_test, y_train, y_test = train_test_split(
    u, y,test_size=16, random_state=4)


train_series = y_train.reshape(100, 1)
test_series = y_test.reshape(80,1)
u_train.reshape(100,1)
u_test.reshape(80,1)
from keras.preprocessing.sequence import TimeseriesGenerator
train_generator = TimeseriesGenerator(train_series, train_series,
                                      length   = 20,
                                      sampling_rate= 1,
                                      stride = 1,
                                      batch_size = 10            )
test_generator = TimeseriesGenerator(test_series, test_series,
                                      length   = 20,
                                      sampling_rate= 1,
                                      stride = 1,
                                      batch_size = 10            )

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

model = Sequential()
model.add(LSTM(4, input_shape=(20,1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
model.fit(train_generator,epochs=300, verbose=0)

test_predictions = model.predict(test_generator)

x = np.arange(0,60)
fig, ax = plt.subplots(1, 1, figsize=(15, 5))
ax.plot(u_train,y_train, lw=2, label='train data')
ax.plot(u_test,y_test, lw=3, c='y', label='test data')
ax.plot(x,test_predictions, lw=3, c='r',linestyle = ':', label='predictions')
ax.legend(loc="lower left")
plt.show();